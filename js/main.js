// Generated by CoffeeScript 1.10.0
(function() {
  "Bubble Timer\n\nbubbles audio from:\nhttp://soundbible.com/1137-Bubbles.html\n\nThis is a learning project/playground made while learning coffeescript.\nThe ostensible motivation was to create a program that could be used\nto time the steeping of tea.  In that regard it was successful.\n";
  "\nSome Things learned:\n\n1) Shallow namespaces can be bad.  Not a problem here though,\nthis program is way too small!  To experiment i made first.coffee\nwhich just passes modules around, but is a little wonky.\nI can see some of the advantages of something more sophisticated.\n\n\nThings to try:\n\n1) Real package/module managers and related tools.\n\n1a) If not the above, then make something better than _first\n\n2) Images in canvas, multiple canvases, things that aren't canvas.";
  var B, H, audioFile, canvas, chooseBgColor, circles, ctx, cull_circles, draw, getMousePos, handleKeyUp, handleMouseDown, handleMouseMove, handleMouseOut, handleMouseUp, handleWindowResize, jcanvas, lastTime, loadCircles, minDist, mouseDown, pauseAll, rafLoop, saveCircles, setCanvasSize, setup, start, stop, stopToken, update, windowResized;

  H = _first.request('helper');

  B = _first.request('bubble');

  minDist = 5;

  jcanvas = null;

  canvas = null;

  ctx = null;

  stopToken = 0;

  mouseDown = false;

  start = {
    x: 0,
    y: 0
  };

  stop = {
    x: 0,
    y: 0
  };

  circles = [];

  cull_circles = [];

  lastTime = 0;

  pauseAll = false;

  windowResized = false;

  audioFile = "assets/bubbles.mp3";

  setup = function() {
    jcanvas = $('<canvas>', {
      'id': 'clockCanvas'
    });
    $('#addCanvasHere').append(jcanvas);
    jcanvas.mousedown(handleMouseDown);
    jcanvas.mouseup(handleMouseUp);
    jcanvas.mousemove(handleMouseMove);
    jcanvas.mouseout(handleMouseOut);
    canvas = jcanvas[0];
    ctx = canvas.getContext('2d');
    setCanvasSize();
    window.addEventListener('keyup', handleKeyUp);
    window.onresize = handleWindowResize;
    return loadCircles();
  };

  rafLoop = function(time) {
    var dt;
    if (time == null) {
      time = 0;
    }
    dt = time - lastTime;
    stopToken = requestAnimationFrame(rafLoop);
    update(dt);
    draw(dt);
    return lastTime = time;
  };

  update = function(dt) {
    var circle, cull_circle, i, len;
    if (!pauseAll) {
      for (i = 0, len = circles.length; i < len; i++) {
        circle = circles[i];
        cull_circle = circle.update(dt);
        if (cull_circle) {
          cull_circles.push(cull_circle);
        }
      }
    }
    if (cull_circles.length > 0) {
      circles = _.difference(circles, cull_circles);
      return cull_circles = [];
    }
  };

  draw = function(dt) {
    var circle, dist, i, len, timeInMinutes;
    if (windowResized) {
      setCanvasSize();
    }
    ctx.fillStyle = chooseBgColor();
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    for (i = 0, len = circles.length; i < len; i++) {
      circle = circles[i];
      circle.draw();
    }
    dist = H.distance(start, stop);
    if (mouseDown && dist > minDist) {
      ctx.fillStyle = '#00BBAA';
      ctx.beginPath();
      ctx.arc(start.x, start.y, dist, 0, H.TWOPI);
      ctx.fill();
      ctx.closePath();
      ctx.fillStyle = '#000000';
      ctx.font = '30px Arial';
      timeInMinutes = (Math.floor(dist / 60)) + ":" + (('0' + (Math.floor(dist) % 60)).slice(-2));
      return ctx.fillText(timeInMinutes, start.x, start.y);
    }
  };

  chooseBgColor = function() {
    var circle, i, len;
    if (pauseAll) {
      return '#888855';
    }
    if (circles.length === 0) {
      return '#555555';
    }
    for (i = 0, len = circles.length; i < len; i++) {
      circle = circles[i];
      if (circle.t > 0) {
        return '#DFDFD0';
      }
    }
    return '#885555';
  };

  setCanvasSize = function(context) {
    if (context == null) {
      context = ctx;
    }
    context.canvas.width = window.innerWidth;
    context.canvas.height = window.innerHeight;
    return windowResized = false;
  };

  getMousePos = function(event, canvas) {
    if (canvas == null) {
      canvas = canvas;
    }
    return {
      x: event.clientX - jcanvas.offset().left,
      y: event.clientY - jcanvas.offset().top
    };
  };

  saveCircles = function() {
    return localStorage.setItem('circles', JSON.stringify(circles));
  };

  loadCircles = function() {
    var circle, i, jcircle, jcircles, len, results;
    jcircles = JSON.parse(localStorage.getItem('circles')) || [];
    circles = [];
    results = [];
    for (i = 0, len = jcircles.length; i < len; i++) {
      jcircle = jcircles[i];
      circle = new B.CircleTimer(ctx, jcircle.pos, jcircle.r, jcircle.t, jcircle.paused);
      results.push(circles.push(circle));
    }
    return results;
  };

  handleMouseDown = function(event) {
    start = getMousePos(event);
    stop = start;
    return mouseDown = true;
  };

  handleMouseUp = function(event) {
    var circle, dist, i, len, ref;
    if (!mouseDown) {
      return;
    }
    stop = getMousePos(event);
    mouseDown = false;
    dist = H.distance(start, stop);
    if (dist > minDist) {
      circle = new B.CircleTimer(ctx, start, dist);
      return circles.push(circle);
    } else {
      ref = H.flipList(circles);
      for (i = 0, len = ref.length; i < len; i++) {
        circle = ref[i];
        if (circle.posInside(stop)) {
          if (event.shiftKey) {
            cull_circles.push(circle);
            return;
          } else {
            circle.paused = !circle.paused;
            return;
          }
        }
      }
    }
  };

  handleMouseMove = function(event) {
    if (!mouseDown) {
      return;
    }
    return stop = getMousePos(event);
  };

  handleMouseOut = function(event) {
    return mouseDown = false;
  };

  handleKeyUp = function(event) {
    if (event.code === 'Space') {
      pauseAll = !pauseAll;
    }
    if (event.code === 'Enter') {
      return saveCircles();
    }
  };

  handleWindowResize = function(event) {
    return windowResized = true;
  };

  $(function() {
    console.log('$ -> begins');
    _first.applyAllModules();
    setup();
    return rafLoop();
  });

  console.log('main script loaded');

}).call(this);
