// Generated by CoffeeScript 1.12.7
(function() {
  "This contains a class that represents an individual bubble/circle timer.\nIt creates, updates, and draws the circles.";
  var B, CircleTimer, H, bubble;

  bubble = B = {};

  _first.offer('bubble', bubble);

  H = _first.request('helper');

  CircleTimer = (function() {
    function CircleTimer(ctx, pos1, r1, t, paused) {
      this.ctx = ctx;
      this.pos = pos1;
      this.r = r1;
      this.tM = this.getDuration();
      this.t = t || this.tM;
      this.paused = paused || false;
    }

    CircleTimer.prototype.draw = function() {
      var strokeArc;
      if (this.t > 0) {
        if (this.paused) {
          this.ctx.fillStyle = "rgba(100, 0, 200, 0.5)";
        } else {
          this.ctx.fillStyle = "rgba(0, 100, 200, 0.5)";
        }
        this.ctx.beginPath();
        this.ctx.arc(this.pos.x, this.pos.y, this.r, -H.HALFPI, this.getArc(), true);
        this.ctx.lineTo(this.pos.x, this.pos.y);
        this.ctx.fill();
        this.ctx.closePath();
      }
      if (this.t < 0) {
        if (this.paused) {
          this.ctx.strokeStyle = '#FFAA00';
          this.ctx.lineWidth = 3;
          strokeArc = this.getArc();
        } else {
          this.ctx.strokeStyle = '#FF0000';
          this.ctx.lineWidth = 3;
          strokeArc = this.getArc();
        }
      } else {
        this.ctx.strokeStyle = '#000000';
        this.ctx.lineWidth = 1;
        strokeArc = -H.HALFPI - H.TWOPI;
      }
      this.ctx.beginPath();
      this.ctx.arc(this.pos.x, this.pos.y, this.r, -H.HALFPI, strokeArc, true);
      this.ctx.stroke();
      return this.ctx.closePath();
    };

    CircleTimer.prototype.getDuration = function() {
      return this.r * 1000;
    };

    CircleTimer.prototype.getR = function() {
      if (this.t > 0) {
        return this.r;
      } else {
        return (this.tM + this.t) / this.tM * this.r;
      }
    };

    CircleTimer.prototype.getArc = function() {
      return -H.HALFPI - this.t / this.tM * H.TWOPI;
    };

    CircleTimer.prototype.update = function(dt) {
      var tOld;
      if (!this.paused) {
        tOld = this.t;
        this.t -= dt;
        if (tOld > 0 && this.t < 0) {
          H.playSound();
        }
      }
      if (this.t < -this.tM) {
        return this;
      } else {
        return null;
      }
    };

    CircleTimer.prototype.posInside = function(pos) {
      var r;
      r = H.distance(this.pos, pos);
      if (r < this.r) {
        return true;
      } else {
        return false;
      }
    };

    return CircleTimer;

  })();

  B.CircleTimer = CircleTimer;

}).call(this);
