// Generated by CoffeeScript 1.10.0
(function() {
  "This is a playground to see what passing modules around is like.\nI really wanted a way to \"import <module> as <name>\" so that's what\nI was aiming for.  This is obviously not how a real tool should work,  \nbut is good enough for this learning project and was fun to make.\n\nA module puts the functions and values it would like to expose into\nan object, and then offers that object (and a name) to _first.\n\nAt the same time, any module can request access to a module, and it\nwill be given an object that will later have the requested module's\nexposed attributes.  Note that because things may load out of order,\nrequest just returns an empty object!  \n\nOnce all the modules have been offered/requested, then there is an \n'apply' step that puts the offered objects' properties into the \nrequested objects.  This is not ideal, consider better methods.  ";
  var F, _first, addScript, appliedModules, i, len, modulePaths, offeredModules, path, requestedModules, root;

  F = _first = {};

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root._first = _first;

  requestedModules = {};

  appliedModules = {};

  offeredModules = {};

  F.request = function(name) {
    if (!requestedModules[name]) {
      requestedModules[name] = {};
      appliedModules[name] = false;
    }
    return requestedModules[name];
  };

  F.offer = function(name, module) {
    if (offeredModules[name]) {
      return console.log("namespace collision: " + name);
    } else {
      return offeredModules[name] = module;
    }
  };

  F.applyModule = function(name) {
    var key, ref, value;
    if (!offeredModules[name]) {
      console.log("module never offered: " + name);
      return false;
    }
    if (!requestedModules[name]) {
      console.log("module never requested: " + name);
      return false;
    }
    if (appliedModules[name]) {
      console.log("module already applied: " + name);
      return false;
    }
    ref = offeredModules[name];
    for (key in ref) {
      value = ref[key];
      requestedModules[name][key] = value;
    }
    appliedModules[name] = true;
    return true;
  };

  F.applyAllModules = function() {
    var module, name;
    for (name in offeredModules) {
      module = offeredModules[name];
      F.applyModule(name);
    }
    return F.checkAllModulesApplied();
  };

  F.checkAllModulesApplied = function() {
    var allApplied, applied, name;
    allApplied = true;
    for (name in appliedModules) {
      applied = appliedModules[name];
      if (!applied) {
        console.log("module not applied: " + name);
        allApplied = false;
      }
    }
    return allApplied;
  };

  modulePaths = ["js/node_modules/underscore.js", "js/node_modules/jquery.js", "js/helper.js", "js/bubble.js", "js/main.js"];

  addScript = function(pathname) {
    return document.write('<script src="' + pathname + '"></script>');
  };

  for (i = 0, len = modulePaths.length; i < len; i++) {
    path = modulePaths[i];
    addScript(path);
  }

  console.log("_first!");

}).call(this);
